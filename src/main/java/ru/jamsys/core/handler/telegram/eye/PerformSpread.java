package ru.jamsys.core.handler.telegram.eye;

import lombok.Getter;
import lombok.Setter;
import lombok.experimental.Accessors;
import org.springframework.context.annotation.Lazy;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.RequestMapping;
import ru.jamsys.NhlStatisticApplication;
import ru.jamsys.core.component.ServicePromise;
import ru.jamsys.core.component.manager.item.Session;
import ru.jamsys.core.extension.builder.ArrayListBuilder;
import ru.jamsys.core.extension.builder.HashMapBuilder;
import ru.jamsys.core.extension.http.ServletResponseWriter;
import ru.jamsys.core.flat.util.Util;
import ru.jamsys.core.flat.util.telegram.Button;
import ru.jamsys.core.handler.promise.RegisterNotification;
import ru.jamsys.core.promise.Promise;
import ru.jamsys.core.promise.PromiseGenerator;
import ru.jamsys.telegram.TelegramCommandContext;
import ru.jamsys.telegram.TelegramNotification;
import ru.jamsys.telegram.handler.EyeBotCommandHandler;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

@SuppressWarnings("unused")
@Setter
@Getter
@Component
@Lazy
@RequestMapping("/perform_spread/**")
public class PerformSpread implements PromiseGenerator, EyeBotCommandHandler {

    private final ServicePromise servicePromise;

    private final Session<Long, Context> mapSession;

    public PerformSpread(ServicePromise servicePromise) {
        this.servicePromise = servicePromise;
        mapSession = new Session<>(getClass().getSimpleName(), 6_000_000L);
    }

    @Getter
    @Setter
    public static class Context {

        private final Map<String, String> param;

        private final List<Integer> card = new ArrayList<>();

        public Context(Map<String, String> param) {
            this.param = param;
        }

    }

    @Override
    public Promise generate() {
        return servicePromise.get(getClass().getSimpleName(), 12_000L)
                .then("start", (_, _, promise) -> {
                    TelegramCommandContext telegramContext = promise.getRepositoryMapClass(TelegramCommandContext.class);
                    Context context = promise.getRepositoryMapClass(Context.class);
                    for (String step : titleQuestion.keySet()) {
                        if (!telegramContext.getUriParameters().containsKey(step)) {
                            RegisterNotification.add(new TelegramNotification(
                                    telegramContext.getIdChat(),
                                    telegramContext.getTelegramBot().getBotUsername(),
                                    getSelected(telegramContext.getUriParameters())
                                            + titleQuestion.get(step).getQuestion(),
                                    getStepButtons(step, telegramContext.getUriParameters()),
                                    null
                            ));
                            promise.skipAllStep("wait " + step);
                            return;
                        }
                    }
                    Context session = mapSession.computeIfAbsent(telegramContext.getIdChat(), aLong -> new Context(telegramContext.getUriParameters()));
                    if (telegramContext.getUriParameters().containsKey("question")) {
                        session.getParam().put("question", telegramContext.getUriParameters().get("question"));
                        //–¢–∞–∫ –∫–∞–∫ question –±–æ–ª—å—à–æ–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
                        telegramContext.getUriParameters().remove("question");
                    }
                    if (!session.getParam().containsKey("question")) {
                        telegramContext.getStepHandler().put(
                                telegramContext.getIdChat(),
                                ServletResponseWriter.buildUrlQuery(
                                        "/perform_spread/",
                                        telegramContext.getUriParameters()
                                ) + "&question="
                        );
                        RegisterNotification.add(new TelegramNotification(
                                telegramContext.getIdChat(),
                                telegramContext.getTelegramBot().getBotUsername(),
                                "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –∫–æ–ª–æ–¥–µ:",
                                null,
                                null
                        ));
                        promise.skipAllStep("wait question");
                        return;
                    }
                    if (telegramContext.getUriParameters().containsKey("card")) {
                        session.getParam().put("card", telegramContext.getUriParameters().get("card"));
                        //–¢–∞–∫ –∫–∞–∫ question –±–æ–ª—å—à–æ–π, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
                        telegramContext.getUriParameters().remove("card");
                    }
                    if (!session.getParam().containsKey("card")) {
                        telegramContext.getStepHandler().put(
                                telegramContext.getIdChat(),
                                ServletResponseWriter.buildUrlQuery(
                                        "/perform_spread/",
                                        telegramContext.getUriParameters()
                                ) + "&card="
                        );
                        RegisterNotification.add(new TelegramNotification(
                                telegramContext.getIdChat(),
                                telegramContext.getTelegramBot().getBotUsername(),
                                getSelected(telegramContext.getUriParameters()) +
                                        "–ö–æ–ª–æ–¥–∞ —É—Å–ª—ã—à–∞–ª–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å: " + session.getParam().get("question") + ".\n–ö–æ–ª–æ–¥–∞ –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞, –≤ –∫–æ–ª–æ–¥–µ 78 –∫–∞—Ä—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ 3 –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (,), –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—Ç—è–Ω—É—Ç—å:",
                                null,
                                null
                        ));
                        promise.skipAllStep("wait card");
                        return;
                    }
                    String[] cards = session.getParam().get("card").split(",");
                    session.getCard().clear();
                    for (String cardNum : cards) {
                        if (Util.isNumeric(cardNum.trim())) {
                            session.getCard().add(Integer.parseInt(cardNum.trim()));
                        }
                    }
                    if (session.getCard().size() < 3) {
                        session.getParam().remove("card");
                        telegramContext.getStepHandler().put(
                                telegramContext.getIdChat(),
                                ServletResponseWriter.buildUrlQuery(
                                        "/perform_spread/",
                                        telegramContext.getUriParameters()
                                ) + "&card="
                        );
                        RegisterNotification.add(new TelegramNotification(
                                telegramContext.getIdChat(),
                                telegramContext.getTelegramBot().getBotUsername(),
                                getSelected(telegramContext.getUriParameters()) +
                                        "–ö–æ–ª–æ–¥–∞ —É—Å–ª—ã—à–∞–ª–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å: " + session.getParam().get("question") + ".\n–ö–æ–ª–æ–¥–∞ –ø–µ—Ä–µ–º–µ—à–∞–Ω–∞, –≤ –∫–æ–ª–æ–¥–µ 78 –∫–∞—Ä—Ç, –Ω–∞–ø–∏—à–∏—Ç–µ 3 –Ω–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (,), –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—Ç—è–Ω—É—Ç—å:",
                                null,
                                null
                        ));
                        promise.skipAllStep("wait card");
                        return;
                    }
                    Util.logConsoleJson(getClass(), session);
                })
                .extension(NhlStatisticApplication::addOnError);
    }

    @Getter
    @Setter
    @Accessors(chain = true)
    public static class Steps {
        String question;
        String title;
        ArrayListBuilder<String> variant = new ArrayListBuilder<>();
    }

    public static Map<String, Steps> titleQuestion = new HashMapBuilder<String, Steps>()
            .append("s1", new Steps()
                    .setQuestion("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±–ª–∞—Å—Ç—å, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:")
                    .setTitle("–û–±–ª–∞—Å—Ç—å")
                    .setVariant(new ArrayListBuilder<String>()
                            .append("üèπ –õ–∏—á–Ω–∞—è –∂–∏–∑–Ω—å (–ª—é–±–æ–≤—å, –æ—Ç–Ω–æ—à–µ–Ω–∏—è, –ø–æ–∏—Å–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–∞)")
                            .append("üíº –†–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞ (—Ä–∞–±–æ—Ç–∞, –ø–æ–≤—ã—à–µ–Ω–∏–µ, –≤—ã–±–æ—Ä –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏)")
                            .append("üí∞ –§–∏–Ω–∞–Ω—Å—ã (–¥–µ–Ω–µ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –≤–ª–æ–∂–µ–Ω–∏—è, –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ)")
                            .append("‚öïÔ∏è –ó–¥–æ—Ä–æ–≤—å–µ (–æ–±—â–µ–µ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ, —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–π –±–∞–ª–∞–Ω—Å)")
                            .append("üîÆ –î—É—Ö–æ–≤–Ω—ã–π –ø—É—Ç—å (—Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏)")
                            .append("‚öñÔ∏è –°–∏—Ç—É–∞—Ü–∏—è –∏–ª–∏ –≤—ã–±–æ—Ä (–≤–∞–∂–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –æ—Ü–µ–Ω–∫–∞ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤)"))
            )
            .append("s2", new Steps()
                    .setQuestion("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞:")
                    .setTitle("–¢–∏–ø —Ä–∞—Å–∫–ª–∞–¥–∞")
                    .setVariant(new ArrayListBuilder<String>()
                            .append("üé¥ –û–¥–Ω–∞ –∫–∞—Ä—Ç–∞ (–±—ã—Å—Ç—Ä—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å)")
                            .append("üé≠ –¢—Ä–∏ –∫–∞—Ä—Ç—ã (–ø—Ä–æ—à–ª–æ–µ ‚Äì –Ω–∞—Å—Ç–æ—è—â–µ–µ ‚Äì –±—É–¥—É—â–µ–µ)")
                            .append("üåÄ –ö–µ–ª—å—Ç—Å–∫–∏–π –∫—Ä–µ—Å—Ç (–≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏)")
                            .append("üíû –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –æ—Ç–Ω–æ—à–µ–Ω–∏—è (—á—É–≤—Å—Ç–≤–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞, –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã, —Ä–∞–∑–≤–∏—Ç–∏–µ)")
                            .append("‚öñÔ∏è –†–∞—Å–∫–ª–∞–¥ –Ω–∞ –≤—ã–±–æ—Ä (–∫–∞–∫–æ–π –ø—É—Ç—å –≤—ã–±—Ä–∞—Ç—å)")
                            .append("üî• –ö–∞—Ä–º–∏—á–µ—Å–∫–∏–π –ø—É—Ç—å (—É—Ä–æ–∫–∏, –∫–∞—Ä–º–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏)")
                            .append("üåü –°–æ–≤–µ—Ç –¢–∞—Ä–æ (—á—Ç–æ –¥–µ–ª–∞—Ç—å –≤ —Å–ª–æ–∂–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏)")
                    )
            )
            .append("s3", new Steps()
                    .setQuestion("–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏:")
                    .setTitle("–í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–º–∫–∏")
                    .setVariant(new ArrayListBuilder<String>()
                            .append("üìÖ –ù–∞ –¥–µ–Ω—å")
                            .append("üìÜ –ù–∞ –Ω–µ–¥–µ–ª—é")
                            .append("üóì –ù–∞ –º–µ—Å—è—Ü")
                            .append("üìñ –ù–∞ –≥–æ–¥")
                            .append("üîÆ –ù–∞ –Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –±—É–¥—É—â–µ–µ")
                            .append("‚è≥ –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–∞")
                    )
            )
            .append("s4", new Steps()
                    .setQuestion("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–¥—É:")
                    .setTitle("–ö–æ–ª–æ–¥–∞")
                    .setVariant(new ArrayListBuilder<String>()
                            .append("üè∞ –¢–∞—Ä–æ –†–∞–π–¥–µ—Ä-–£—ç–π—Ç–∞ (–∫–ª–∞—Å—Å–∏–∫–∞)")
                            .append("üé≠ –¢–∞—Ä–æ –¢–æ—Ç–∞ (–ê–ª–∏—Å—Ç–µ—Ä–∞ –ö—Ä–æ—É–ª–∏)")
                            .append("üíã –¢–∞—Ä–æ –ú–∞–Ω–∞—Ä–∞ (–ª—é–±–æ–≤–Ω—ã–µ –∏ –∏–Ω—Ç–∏–º–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã)")
                            .append("üå≤ –¢–∞—Ä–æ –î—Ä—É–∏–¥–æ–≤ (–ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —ç–Ω–µ—Ä–≥–∏–∏, –º–∞–≥–∏—è)")
                            .append("üî• –¢–∞—Ä–æ –¢–µ–Ω–µ–π (–≥–ª—É–±–∏–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑, –∫–∞—Ä–º–∞)")
                            .append("üÉè –û—Ä–∞–∫—É–ª –õ–µ–Ω–æ—Ä–º–∞–Ω (–Ω–µ —Å–æ–≤—Å–µ–º –¢–∞—Ä–æ, –Ω–æ —Ç–æ–∂–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç–µ–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞)")
                    )
            )
            .append("s5", new Steps()
                    .setQuestion("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è")
                    .setTitle("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è")
                    .setVariant(new ArrayListBuilder<String>()
                            .append("üìñ –ü–æ–ª–Ω–æ–µ —Ä–∞–∑—ä—è—Å–Ω–µ–Ω–∏–µ (–∞–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏ + –ø—Ä–æ–≥–Ω–æ–∑)")
                            .append("‚öñÔ∏è –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (–µ—Å–ª–∏ –≤—ã–±–æ—Ä –º–µ–∂–¥—É –¥–≤—É–º—è —Ä–µ—à–µ–Ω–∏—è–º–∏)")
                            .append("üåü –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–æ–≤–µ—Ç –æ—Ç –¢–∞—Ä–æ")
                            .append("üî• –ü—Ä–æ—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ä–º–∏—á–µ—Å–∫–∏—Ö —É–∑–ª–æ–≤ –∏ –ø—Ä–æ—à–ª—ã—Ö –∂–∏–∑–Ω–µ–π")
                            .append("üíû –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä–∞")
                            .append("üåÄ –ß—Ç–æ –º–µ—à–∞–µ—Ç –∏ —á—Ç–æ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –≤ —ç—Ç–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏")
                    )
            );

    public String getSelected(Map<String, String> param) {
        StringBuilder sb = new StringBuilder();
        param.forEach((key, idx) -> {
            if (titleQuestion.get(key) == null) {
                return;
            }
            sb.append(getInfo(
                    titleQuestion.get(key).getVariant(),
                    Integer.parseInt(idx),
                    titleQuestion.get(key).getTitle()
            )).append("\n");
        });
        return sb.append("\n").toString();
    }

    public static String getInfo(List<String> list, int idx, String title) {
        return "üî∏ " + title + ": " + list.get(idx);
    }

    public static List<Button> getStepButtons(String key, Map<String, String> param) {
        List<String> list = titleQuestion.get(key).getVariant();
        List<Button> result = new ArrayList<>();
        int idx = 0;
        for (String item : list) {
            result.add(new Button(
                    item,
                    ServletResponseWriter.buildUrlQuery(
                            "/perform_spread/",
                            new HashMapBuilder<>(param)
                                    .append(key, "" + idx++)
                    )
            ));
        }
        return result;
    }

}
