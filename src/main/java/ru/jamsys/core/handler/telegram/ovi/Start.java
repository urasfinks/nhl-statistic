package ru.jamsys.core.handler.telegram.ovi;

import lombok.Getter;
import lombok.Setter;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.RequestMapping;
import ru.jamsys.core.App;
import ru.jamsys.core.component.DelaySenderComponent;
import ru.jamsys.core.component.ServicePromise;
import ru.jamsys.core.extension.builder.ArrayListBuilder;
import ru.jamsys.core.extension.builder.HashMapBuilder;
import ru.jamsys.core.extension.http.ServletResponseWriter;
import ru.jamsys.core.flat.util.UtilNHL;
import ru.jamsys.core.flat.util.telegram.Button;
import ru.jamsys.core.handler.promise.PlayerStatistic;
import ru.jamsys.core.jt.JTOviSubscriber;
import ru.jamsys.core.promise.Promise;
import ru.jamsys.core.promise.PromiseGenerator;
import ru.jamsys.core.resource.jdbc.JdbcRequest;
import ru.jamsys.core.resource.jdbc.JdbcResource;
import ru.jamsys.telegram.TelegramCommandContext;
import ru.jamsys.telegram.handler.OviGoalsBotCommandHandler;

import java.util.List;
import java.util.Map;

@SuppressWarnings("unused")
@Setter
@Getter
@Component
@RequestMapping({"/start"})
public class Start implements PromiseGenerator, OviGoalsBotCommandHandler {

    private final ServicePromise servicePromise;

    public Start(ServicePromise servicePromise) {
        this.servicePromise = servicePromise;
    }

    @Override
    public Promise generate() {
        return servicePromise.get(getClass().getSimpleName(), 12_000L)
                .extension(promise -> promise.setRepositoryMapClass(Start.class, this))
                .thenWithResource("subscribe", JdbcResource.class, (_, _, promise, jdbcResource) -> {
                    TelegramCommandContext context = promise.getRepositoryMapClass(TelegramCommandContext.class);
                    List<Map<String, Object>> result = jdbcResource.execute(new JdbcRequest(JTOviSubscriber.SELECT)
                            .addArg("id_chat", context.getIdChat())
                    );
                    if (!result.isEmpty()) {
                        promise.setRepositoryMapClass(Boolean.class, false);
                    } else {
                        promise.setRepositoryMapClass(Boolean.class, true);
                        jdbcResource.execute(new JdbcRequest(JTOviSubscriber.INSERT)
                                .addArg("id_chat", context.getIdChat())
                        );
                    }
                })
                .then("check", (_, _, promise) -> {
                    TelegramCommandContext context = promise.getRepositoryMapClass(TelegramCommandContext.class);
                    if (!promise.getRepositoryMapClass(Boolean.class)) {
                        context.getTelegramBot().send(
                                context.getIdChat(),
                                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã",
                                null
                        );
                        promise.skipAllStep("already notification");
                    }
                })
                .then("ovi", new PlayerStatistic(UtilNHL.getOvi(), UtilNHL.getOviScoreLastSeason()).generate())
                .then("send", (_, _, promise) -> {
                    TelegramCommandContext context = promise.getRepositoryMapClass(TelegramCommandContext.class);
                    PlayerStatistic ovi = promise.getRepositoryMapClass(Promise.class, "ovi")
                            .getRepositoryMapClass(PlayerStatistic.class);
                    context.getTelegramBot().send(
                            context.getIdChat(),
                            String.format("""
                                            –°–∞–Ω—è —Å–Ω–æ–≤–∞ –≤ –¥–µ–ª–µ! –í–∫–ª—é—á–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≥–æ–ª–∞.
                                            
                                            –ü–æ–¥–¥–µ—Ä–∂–∏–º –û–≤–∏ –Ω–∞ –ø—É—Ç–∏ –∫ –≤–µ–ª–∏—á–∏—é! üèíüî•
                                            
                                            %s
                                            """,
                                    ovi.getMessage()
                            ),
                            null
                    );
                    App.get(DelaySenderComponent.class).add(
                            context,
                            """
                                    –¢—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏:
                                    
                                    /stats ‚Äî –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–æ–ª–æ–≤, –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –¥–æ —Ä–µ–∫–æ—Ä–¥–∞, –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–µ–∑–æ–Ω—É.
                                    /poll_results - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è.
                                    /schedule ‚Äî –ë–ª–∏–∂–∞–π—à–∏–µ –∏–≥—Ä—ã –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –û–≤–µ—á–∫–∏–Ω–∞ –∏ –∫–æ–º–∞–Ω–¥—ã Washington Capitals.
                                    /stop ‚Äî –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è""",
                            null,
                            10_000L);

                    App.get(DelaySenderComponent.class).add(
                            context,
                            "–ü–æ–±—å–µ—Ç –ª–∏ –ê–ª–µ–∫—Å–Ω–∞–¥—Ä –û–≤–µ—á–∫–∏–Ω —Ä–µ–∫–æ—Ä–¥ –£—ç–π–Ω–∞ –ì—Ä–µ—Ç—Ü–∫–∏ –≤ —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ?",
                            new ArrayListBuilder<Button>()
                                    .append(new Button(
                                            "–î–∞ üî•",
                                            ServletResponseWriter.buildUrlQuery(
                                                    "/poll_results/",
                                                    new HashMapBuilder<>(context.getUriParameters())
                                                            .append("value", "true")

                                            )
                                    ))
                                    .append(new Button(
                                            "–ù–µ—Ç ‚õî",
                                            ServletResponseWriter.buildUrlQuery(
                                                    "/poll_results/",
                                                    new HashMapBuilder<>(context.getUriParameters())
                                                            .append("value", "false")

                                            )
                                    ))
                            ,
                            20_000L);
                })
                ;
    }

}
