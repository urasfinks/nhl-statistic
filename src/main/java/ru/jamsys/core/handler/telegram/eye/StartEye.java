package ru.jamsys.core.handler.telegram.eye;

import lombok.Getter;
import lombok.Setter;
import org.springframework.stereotype.Component;
import org.springframework.web.bind.annotation.RequestMapping;
import ru.jamsys.NhlStatisticApplication;
import ru.jamsys.core.component.ServicePromise;
import ru.jamsys.core.jt.JTSubscriber;
import ru.jamsys.core.promise.Promise;
import ru.jamsys.core.promise.PromiseGenerator;
import ru.jamsys.core.resource.jdbc.JdbcRequest;
import ru.jamsys.core.resource.jdbc.JdbcResource;
import ru.jamsys.telegram.TelegramCommandContext;
import ru.jamsys.telegram.handler.EyeBotCommandHandler;

import java.util.List;
import java.util.Map;

@SuppressWarnings("unused")
@Setter
@Getter
@Component
@RequestMapping("/start/**")
public class StartEye implements PromiseGenerator, EyeBotCommandHandler {

    private final ServicePromise servicePromise;

    public StartEye(ServicePromise servicePromise) {
        this.servicePromise = servicePromise;
    }

    @Override
    public Promise generate() {
        return servicePromise.get(getClass().getSimpleName(), 12_000L)
                .extension(promise -> promise.setRepositoryMapClass(StartEye.class, this))
                .thenWithResource("subscribe", JdbcResource.class, (_, _, promise, jdbcResource) -> {
                    TelegramCommandContext context = promise.getRepositoryMapClass(TelegramCommandContext.class);
                    List<Map<String, Object>> result = jdbcResource.execute(new JdbcRequest(JTSubscriber.SELECT)
                            .addArg("id_chat", context.getIdChat())
                            .addArg("bot", context.getTelegramBot().getBotUsername())
                    );
                    if (result.isEmpty()) {
                        promise.setRepositoryMapClass(Boolean.class, true);
                        jdbcResource.execute(new JdbcRequest(JTSubscriber.INSERT)
                                .addArg("bot", context.getTelegramBot().getBotUsername())
                                .addArg("id_chat", context.getIdChat())
                                .addArg("user_info", context.getUserInfo())
                                .addArg("playload", context.getUriParameters().getOrDefault("playload", ""))
                        );
                    }
                })
                .then("start", (_, _, promise) -> {
                    TelegramCommandContext telegramContext = promise.getRepositoryMapClass(TelegramCommandContext.class);
                    telegramContext.getTelegramBot().send(
                            telegramContext.getIdChat(),
                            """
                                    üîÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ "–û–∫–æ –°—É–¥—å–±—ã"! üîÆ
                                    
                                    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –∏—Å–∫–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–æ–≤! üÉè –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –º—É–¥—Ä–æ—Å—Ç—å –∫–∞—Ä—Ç –¢–∞—Ä–æ –∏ –ø—Ä–æ–ª–∏—Ç—å —Å–≤–µ—Ç –Ω–∞ —Å–≤–æ—é —Å–∏—Ç—É–∞—Ü–∏—é. –ó–∞–¥–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –≤—ã–±–µ—Ä–∏ —Ä–∞—Å–∫–ª–∞–¥ ‚Äì –∏ –°—É–¥—å–±–∞ –æ—Ç–∫—Ä–æ–µ—Ç –ø–µ—Ä–µ–¥ —Ç–æ–±–æ–π —Å–≤–æ–∏ —Ç–∞–π–Ω—ã.
                                    
                                    ‚ú® –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å? ‚ú®
                                    üîπ –û –ª—é–±–≤–∏ –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö üíû
                                    üîπ –û –∫–∞—Ä—å–µ—Ä–µ –∏ —Ñ–∏–Ω–∞–Ω—Å–∞—Ö üí∞
                                    üîπ –û –±—É–¥—É—â–µ–º –∏ —Å—É–¥—å–±–µ üîÆ
                                    üîπ –û –¥—É—Ö–æ–≤–Ω–æ–º –ø—É—Ç–∏ –∏ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–∏ üåø
                                    
                                    –ù–∞–∂–º–∏ "–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å–∫–ª–∞–¥", –≤—ã–±–µ—Ä–∏ –∫–æ–ª–æ–¥—É –∏ –¥–æ–≤–µ—Ä—å—Å—è –º–∞–≥–∏–∏ –∫–∞—Ä—Ç! üÉè‚ú®""",
                            null
                    );
                })
                .extension(NhlStatisticApplication::addOnError);
    }

}
