package ru.jamsys.core.flat.util;

import ru.jamsys.core.extension.builder.HashMapBuilder;
import ru.jamsys.core.flat.template.twix.TemplateTwix;
import ru.jamsys.core.handler.promise.PlayerStatistic;
import ru.jamsys.tank.data.NHLTeamSchedule;

import java.util.Map;

public class OviStatisticMessage {

    public static String get(PlayerStatistic playerStatistic) {
        Map<String, Object> scoreTotal = playerStatistic.getScoreTotal();
        int seasonGoals = Integer.parseInt(scoreTotal.getOrDefault("goals", "0").toString());
        int countGame = Integer.parseInt(scoreTotal.getOrDefault("countGame", "").toString());

        int assists = Integer.parseInt(scoreTotal.getOrDefault("assists", "").toString());

        int totalGoals = playerStatistic.getScoreLastSeason() + seasonGoals;
        int gretzkyOffset = UtilNHL.getScoreGretzky() - totalGoals;

        String templateNextGame = "";
        if (playerStatistic.getNextGame() != null) {
            NHLTeamSchedule.Game game = new NHLTeamSchedule.Game(playerStatistic.getNextGame());
            templateNextGame = String.format(
                    "–°–ª–µ–¥—É—é—â–∞—è –∏–≥—Ä–∞: üÜö %s, %s",
                    game.toggleTeam(UtilNHL.getOvi().getTeam()),
                    game.getMoscowDate()
            );
        }

        return TemplateTwix.template("""
                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–∞ –û–≤–µ—á–∫–∏–Ω–∞ –Ω–∞ ${currentDate}:
                üéØ –ó–∞–±–∏—Ç–æ –≥–æ–ª–æ–≤: ${totalGoals}
                üèÜ ${newReq}
                üìÖ –°–µ–∑–æ–Ω ${seasonTitle}: ${countGame} ${countGamePostfix}, ${seasonGoals} ${seasonGoalsPostfix}, ${assists} ${assistsPostfix}, ${score} ${scorePostfix}, ${countTailGamePrefix} ${countTailGame} ${countTailGamePostfix}
                üìà –¢–µ–º–ø: –í —Å—Ä–µ–¥–Ω–µ–º ${avgGoalsInGame} –≥–æ–ª–∞ –∑–∞ –∏–≥—Ä—É –≤ —ç—Ç–æ–º —Å–µ–∑–æ–Ω–µ
                
                ${templateNextGame}
                
                üìç –í—Ä–µ–º—è —É–∫–∞–∑–∞–Ω–æ –ø–æ –ú–°–ö
                """, new HashMapBuilder<String, String>()
                .append("currentDate", playerStatistic.getDate())

                .append("totalGoals", String.valueOf(totalGoals))
                .append("totalGoalsPostfix", Util.digitTranslate(totalGoals, "–≥–æ–ª", "–≥–æ–ª–∞", "–≥–æ–ª–æ–≤"))

                .append("seasonGoals", String.valueOf(seasonGoals))
                .append("seasonGoalsPostfix", Util.digitTranslate(seasonGoals, "–≥–æ–ª", "–≥–æ–ª–∞", "–≥–æ–ª–æ–≤"))

                .append("gretzkyOffset", String.valueOf(gretzkyOffset))
                .append("gretzkyOffsetPostfix", Util.digitTranslate(gretzkyOffset, "–≥–æ–ª", "–≥–æ–ª–∞", "–≥–æ–ª–æ–≤"))

                .append("countTailGamePrefix", Util.digitTranslate(playerStatistic.getCountTailGame(), "–æ—Å—Ç–∞–ª—Å—è", "–æ—Å—Ç–∞–ª–æ—Å—å", "–æ—Å—Ç–∞–ª–æ—Å—å"))
                .append("countTailGame", String.valueOf(playerStatistic.getCountTailGame()))
                .append("countTailGamePostfix", Util.digitTranslate(playerStatistic.getCountTailGame(), "–º–∞—Ç—á", "–º–∞—Ç—á–∞", "–º–∞—Ç—á–µ–π"))

                .append("avgGoalsInGame", playerStatistic.getAvgGoalsInGame().toString())

                .append("countGame", String.valueOf(countGame))
                .append("countGamePostfix", Util.digitTranslate(countGame, "–º–∞—Ç—á", "–º–∞—Ç—á–∞", "–º–∞—Ç—á–µ–π"))

                .append("seasonTitle", UtilNHL.seasonFormat(UtilNHL.getActiveSeasonOrNext()))
                .append("assists", String.valueOf(assists))
                .append("assistsPostfix", Util.digitTranslate(assists, "–ø–µ—Ä–µ–¥–∞—á–∞", "–ø–µ—Ä–µ–¥–∞—á–∏", "–ø–µ—Ä–µ–¥–∞—á"))

                .append("score", String.valueOf(assists + seasonGoals))
                .append("scorePostfix", Util.digitTranslate(assists + seasonGoals, "–æ—á–∫–æ", "–æ—á–∫–∞", "–æ—á–∫–æ–≤"))

                .append("templateNextGame", templateNextGame)

                .append("newReq", get(totalGoals))
        ).trim();
    }

    public static String get(int totalGoals) {
        int toRec = 895 - totalGoals;
        if (toRec <= 0) {
            return "–†–µ–∫–æ—Ä–¥ –ì—Ä–µ—Ü–∫–∏ –ø–æ–±–∏—Ç –Ω–∞ " + (Math.abs(toRec) + 1) + " "+Util.digitTranslate(Math.abs(toRec) + 1, "–≥–æ–ª", "–≥–æ–ª–∞", "–≥–æ–ª–æ–≤");
        } else {
            return "–î–æ –Ω–æ–≤–æ–≥–æ —Ä–µ–∫–æ—Ä–¥–∞: " + toRec + " " + Util.digitTranslate(toRec, "–≥–æ–ª", "–≥–æ–ª–∞", "–≥–æ–ª–æ–≤");
        }
    }
}
